
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Libraries
> 
> # Removed any libraries not directly necessary
> # Used dplyr and tidyr individually rather than as a part of tidyverse (saved
> # about 0.5 seconds)
> 
> library(haven)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(tidyr)
> library(caret)
Loading required package: lattice
Loading required package: ggplot2
> library(tictoc)
> library(parallel)
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
> library(xgboost)

Attaching package: ‘xgboost’

The following object is masked from ‘package:dplyr’:

    slice

> library(RANN)
> 
> # Data Import and Cleaning
> 
> full_data <- read_sav("GSS2006.sav")
> 
> # Elected to make no changes - this portion already runs in 140 milliseconds
> clean_data <- full_data %>%
+     select_at(vars(c(starts_with("BIG5"), "HEALTH"))) %>%
+     drop_na("HEALTH") %>%
+     filter(rowSums(is.na(.[,1:10])) != 10) %>%
+     mutate_all("as.numeric") 
> 
> 
> # Analysis
> 
> tic()
> egb_mod <- train(
+     HEALTH ~ . ^3, 
+     clean_data,
+     method = "xgbLinear",
+     preProcess = c("knnImpute","zv", "center", "scale"),
+     na.action = na.pass,
+     trControl = trainControl(method = "cv", number = 10),
+     tuneLength = 8
+ )
> time <- toc()
12215.12 sec elapsed
> exec_time_np <- unname(time$toc - time$tic)
> 
> 
> 
> local_cluster <- makeCluster(60)
> registerDoParallel(local_cluster)
> 
> tic()
> egb_mod_p <- train(
+     HEALTH ~ . ^3, 
+     clean_data,
+     method = "xgbLinear",
+     preProcess = c("knnImpute","zv", "center", "scale"),
+     na.action = na.pass,
+     trControl = trainControl(method = "cv", number = 10),
+     tuneLength = 8
+ )
> time_p <- toc()
265.615 sec elapsed
> exec_time_p <- unname(time_p$toc - time_p$tic)
> 
> stopCluster(local_cluster)
> registerDoSEQ()
> 
> difftime <- exec_time_np - exec_time_p
> 
> time_df <- data.frame(exec_time_np = exec_time_np, exec_time_p = exec_time_p)
> write.csv(time_df,"batch.csv", row.names = F)
> 
> # The non-parallelized execution time (using 1 processor) was 442.709 seconds. 
> # The parallelized execution time (using 7 processors) was 237.622 seconds. 
> # The difference was 205.619 seconds. 
> 
> proc.time()
     user    system   elapsed 
12196.352    22.173 12510.925 
